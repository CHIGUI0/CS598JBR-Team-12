{"task_id": "HumanEval/17", "completion": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    music_list = music_string.split()\n    result = []\n    for note in music_list:\n        if note == 'o':\n            result.append(4)\n        elif note == 'o|':\n            result.append(2)\n        elif note == '.|':\n            result.append(1)\n    return result\n\n\ndef parse_music_2(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music_2('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    music_list = music_string.split()\n    result = []\n    for note in music"}
{"task_id": "HumanEval/53", "completion": "\n\ndef add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x+y\n\n\ndef subtract(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> subtract(2, 3)\n    -1\n    >>> subtract(5, 7)\n    -2\n    \"\"\"\n    return x-y\n\n\ndef multiply(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    35\n    \"\"\"\n    return x*y\n\n\ndef divide(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> divide(2, 3)\n    0.666666666666666\n    >>> divide(5, 7)\n    0.714285714285714\n    \"\"\"\n    return x/y\n\n\ndef power(x: int, y: int):\n    \"\"\"Raise x to the power of y\n    >>> power(2, 3)\n    8\n    >>> power(5, 7)\n    78125\n    \"\"\"\n    return x**y\n\n\ndef factorial(x: int):\n    \"\"\"Calculate the factorial of x\n    >>> factorial(2)\n    2\n    >>> factorial(5)\n    120\n    \"\"\"\n    if x == 0:\n        return 1\n    else:\n        return x * factorial(x-1)\n\n\ndef fibonacci(x: int):\n    \"\"\"Calculate the fibonacci of x\n    >>> fibonacci(2)\n    1\n    >>> fibonacci(5)\n    5\n    \"\"\"\n    if x == 0:\n        return 0\n    elif x == 1:\n        return 1\n    else"}
{"task_id": "HumanEval/16", "completion": "\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef count_distinct_characters_2(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_2('xyzXYZ')\n    3\n    >>> count_distinct_characters_2('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef count_distinct_characters_3(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_3('xyzXYZ')\n    3\n    >>> count_distinct_characters_3('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef count_distinct_characters_4(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_4('xyzXYZ')\n    3\n    >>> count_distinct_characters_4('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef count_distinct_characters_5(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_5('xyzXYZ')\n    3\n    >>> count_distinct_characters_5('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef count_distinct_char"}
{"task_id": "HumanEval/57", "completion": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if l[0] < l[1]:\n        for i in range(len(l)-1):\n            if l[i] > l[i+1]:\n                return False\n        return True\n    elif l[0] > l[1]:\n        for i in range(len(l)-1):\n            if l[i] < l[i+1]:\n                return False\n        return True\n    else:\n        return False\n\n\ndef main():\n    l = [1, 2, 4, 20]\n    print(monotonic(l))\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n    main()"}
{"task_id": "HumanEval/44", "completion": "\n\ndef change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < base:\n        return str(x)\n    else:\n        return change_base(x // base, base) + str(x % base)\n\n\ndef change_base_2(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base_2(8, 3)\n    '22'\n    >>> change_base_2(8, 2)\n    '1000'\n    >>> change_base_2(7, 2)\n    '111'\n    \"\"\"\n    if x < base:\n        return str(x)\n    else:\n        return change_base_2(x // base, base) + str(x % base)\n\n\ndef change_base_3(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> changechange_base_3(8, 3)\n    '22'\n    >>> change_base_3(8, 2)\n    '1000'\n    >>> change_base_3(7, 2)\n    '111'\n    \"\"\"\n    if x < base:\n        return str(x)\n    else:\n        return change_base_3(x // base, base) + str(x % base)\n\n\ndef change_base_4(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after"}
{"task_id": "HumanEval/124", "completion": "\ndef valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    # your code here\n    pass\n\n\ndef valid_time(time):\n    \"\"\"You have to write a function which validates a given time string and\n    returns True if the time is valid otherwise False.\n    The time is valid if all of the following rules are satisfied:\n    1. The time string is not empty.\n    2. The hours should not be less than 0 or higher than 23.\n    3. The minutes should not be less than 0 or higher than 59.\n    4. The seconds should not be less than 0 or higher than 59.\n    5. The time should be in the format: hh:mm:ss\n\n    for example: \n    valid_time('00:00:00') => True\n\n    valid_time('23:59:59') => True\n\n"}
{"task_id": "HumanEval/78", "completion": "\ndef hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    # your code here\n    pass\n\n\ndef hex_key_2(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E,"}
{"task_id": "HumanEval/112", "completion": "\ndef reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i,'')\n    return (s,s[::-1]==s)\n\n\ndef reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i,'')\n    return (s,s[::-1]==s)\n\n\ndef reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a"}
{"task_id": "HumanEval/144", "completion": "\ndef simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n    x_num, x_den = x.split('/')\n    n_num, n_den = n.split('/')\n    x_num, x_den, n_num, n_den = int(x_num), int(x_den), int(n_num), int(n_den)\n    if x_num * n_den == x_den * n_num:\n        return True\n    else:\n        return False\n\n\ndef simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n    x_num, x_den = x.split('/')\n    n_num, n_den = n.split('/')\n    x_num, x_den, n_num, n_den = int(x_num), int(x_den), int("}
{"task_id": "HumanEval/145", "completion": "\ndef order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda x: (sum(int(i) for i in str(abs(x))), x))\n\n\ndef order_by_points_2(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda x: (sum(int(i) for i in str(abs(x))), x))\n\n\ndef order_by_points_3(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points_3([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda x: (sum(int(i) for i in str(abs(x))), x))\n\n\ndef order_by_points_4(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list"}
{"task_id": "HumanEval/96", "completion": "\ndef count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    pass\n\n\ndef count_up_to_v2(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    pass\n\n\ndef count_up_to_v3(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]"}
{"task_id": "HumanEval/101", "completion": "\ndef words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    return s.split()\n\n\ndef words_string_2(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\",three"}
{"task_id": "HumanEval/52", "completion": "\n\ndef below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for i in l:\n        if i >= t:\n            return False\n    return True\n\n\ndef above_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are above threshold t.\n    >>> above_threshold([1, 2, 4, 10], 1)\n    True\n    >>> above_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for i in l:\n        if i <= t:\n            return False\n    return True\n\n\ndef below_threshold_v2(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold_v2([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold_v2([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for i in l:\n        if i >= t:\n            return False\n    return True\n\n\ndef above_threshold_v2(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are above threshold t.\n    >>> above_threshold_v2([1, 2, 4, 10], 1)\n    True\n    >>> above_threshold_v2([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for i in l:\n        if i <= t:\n            return False\n    return True\n\n\ndef below_threshold_v3(l: list, t: int):\n    \"\"\"Return True if all numbers in"}
{"task_id": "HumanEval/35", "completion": "\n\ndef max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    max_el = l[0]\n    for el in l:\n        if el > max_el:\n            max_el = el\n    return max_el\n\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    min_el = l[0]\n    for el in l:\n        if el < min_el:\n            min_el = el\n    return min_el\n\n\ndef max_element_index(l: list):\n    \"\"\"Return index of maximum element in the list.\n    >>> max_element_index([1, 2, 3])\n    2\n    >>> max_element_index([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    9\n    \"\"\"\n    max_el = l[0]\n    max_el_index = 0\n    for i, el in enumerate(l):\n        if el > max_el:\n            max_el = el\n            max_el_index = i\n    return max_el_index\n\n\ndef min_element_index(l: list):\n    \"\"\"Return index of minimum element in the list.\n    >>> min_element_index([1, 2, 3])\n    0\n    >>> min_element_index([5, 3, -5, 2, -3, 3, 9, 0, 123"}
{"task_id": "HumanEval/139", "completion": "\ndef special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n\n\ndef main():\n    n = int(input(\"Enter a number: \"))\n    print(special_factorial(n))\n\n\nif __name__ == \"__main__\":\n    main()"}
{"task_id": "HumanEval/74", "completion": "\ndef total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) ➞ []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n    '''\n    if len(lst1) == 0 and len(lst2) == 0:\n        return []\n    elif len(lst1) == 0:\n        return lst2\n    elif len(lst2) == 0:\n        return lst1\n    else:\n        lst1_total_chars = sum([len(i) for i in lst1])\n        lst2_total_chars = sum([len(i) for i in lst2])\n        if lst1_total_chars < lst2_total_chars:\n            return lst1\n        elif lst1_total_chars > lst2_total_chars:\n            return lst2\n        else:\n            return lst1\n\n\ndef total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) ➞ []\n    total_"}
{"task_id": "HumanEval/85", "completion": "\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum(lst[1::2])\n\n\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum(lst[1::2])\n\n\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum(lst[1::2])\n\n\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum(lst[1::2])\n\n\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum(lst[1::2])\n\n\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum(lst[1::2])\n\n\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n   "}
{"task_id": "HumanEval/51", "completion": "\n\ndef remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    result = ''\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result\n\n\ndef remove_vowels_2(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    result = ''\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result\n\n\ndef remove_vowels_3(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vow"}
{"task_id": "HumanEval/11", "completion": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return ''.join([str(int(a[i]) ^ int(b[i]))) for i in range(len(a))])\n\n\ndef string_xor_list(a: str, b: List[str]) -> List[str]:\n    \"\"\" Input are two strings a and b consisting only of 1s and .\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor_list('010', ['110', '101', '000'])\n    ['100', '101', '010']\n    \"\"\"\n    return [string_xor(a, b[i]) for i in range(len(b))]\n\n\ndef string_xor_list_list(a: List[str], b: List[str]) -> List[str]:\n    \"\"\" Input are two strings a and b consisting only of 1s and .\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor_list_list(['010', '110'], ['110', '101', '000'])\n    ['100', '101', '010']\n    \"\"\"\n    return [string_xor(a[i], b[i]) for i in range(len(a))]\n\n\ndef string_xor_list_list_list(a: List[str], b: List[str], c: List[str]) -> List[str]:\n    \"\"\" Input are two strings a and b consisting only of 1s and .\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_"}
{"task_id": "HumanEval/49", "completion": "\n\ndef modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    if n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n    return modp(n // , p) ** s % p\n\n\ndef modp_iter(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp_iter(3, 5)\n    3\n    >>> modp_iter(1101, 101)\n    2\n    >>> modp_iter(0, 101)\n    1\n    >>> modp_iter(3, 11)\n    8\n    >>> modp_iter(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    result = 1\n    while n > 0:\n        if n % 2 == 1:\n            result = result * 2 % p\n        n = n // 2\n    return result\n\n\ndef modp_iter_2(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp_iter_2(3, 5)\n    3\n    >>> modp_iter_2(1101, 101)\n    2\n    >>> modp_iter_2(0, 101)\n    1\n    >>> modp_iter_2(3, 11)\n"}
