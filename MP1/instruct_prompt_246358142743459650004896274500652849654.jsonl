{"task_id": "HumanEval/17", "completion": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    music_dict = {'o': 4, 'o|': 2, '.|': 1}\n    music_list = music_string.split()\n    return [music_dict[note] for note in music\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n\n    # Testing with provided example\n    music_string = 'o o| .| o| o| .| .| .| .| .| o o'\n    print(parse_music(music_string))  # should print [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\n    # Testing with another example\n    music_string = 'o o| .| o| o| .| .| .| .| .|'\n    print(parse_music(music_string))  # should print [4, 2, 1, 2, 2, 1, 1, 1, 1]\n\n    # Testing with another example\n    music_string = 'o o| .| o| o| .| .| .| .| .| o o o'\n    print(parse(music_string))  # should print [4"}
{"task_id": "HumanEval/53", "completion": "\n\ndef add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n\n\ndef subtract(x: int, y: int):\n    \"\"\"Subtract number y from x\n    >>> subtract(5, 3)\n    2\n    >>> subtract(7, 2)\n    5\n    \"\"\"\n    return x - y\n\n\ndef multiply(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    35\n    \"\"\"\n    return x * y\n\n\ndef divide(x: int, y: int):\n    \"\"\"Divide x by y\n    >>> divide(6, 2)\n    3\n    >>> divide(35, 7)\n    5\n    \"\"\"\n    if y == 0:\n        raise ZeroDivisionError(\"division by zero\")\n    return x // y\n\n\ndef power(x: int, y: int):\n    \"\"\"Calculate x to the power of y\n    >>> power(2, 3)\n    8\n    >>> power(5, 2)\n    25\n    \"\"\"\n    return x ** y\n\n\ndef factorial(n: int):\n    \"\"\"Calculate the factorial of n\n    >>> factorial(5)\n    120\n    >>> factorial(4)\n    24\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"factorial not defined for negative values\")\n    elif n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\n\ndef gcd(x: int, y: int):\n    \"\"\"Calculate the Greatest Common Divisor of x and y\n    >>> gcd(12, 8)\n    4\n    >>> gcd(35, 10)\n    5\n    \"\"\"\n    while y:\n        x, y = y"}
{"task_id": "HumanEval/16", "completion": "\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    distinct_characters = set()\n    for character in string:\n        distinct_characters.add(character.lower())\n    return len(distinct_characters)\n\n\ndef count_distinct_characters_v2(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_v2('xyzXYZ')\n    3\n    >>> count_distinct_characters_v2('Jerry')\n    4\n    \"\"\"\n    distinct_characters = set()\n    for character in string:\n        distinct_characters.add(character.lower())\n    return len(distinct_characters)\n\n\ndef count_distinct_characters_v3(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_v3('xyzXYZ')\n    3\n    >>> count_distinct_characters_v3('Jerry')\n    4\n    \"\"\"\n    distinct_characters = set()\n    for character in string:\n        distinct_characters.add(character.lower())\n    return len(distinct_characters)\n\n\ndef count_distinct_characters_v4(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_v4('xyzXYZ')\n    3\n    >>> count_distinct_characters_v4('Jerry')\n    4\n    \"\"\"\n    distinct_characters = set()\n    for character in string:\n        distinct_characters.add"}
{"task_id": "HumanEval/57", "completion": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(\n        l[i] >= l[i + 1] for i in range(len(l) - 1)\n    )\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n\n#tests/test_monotonic.py\nimport pytest\nfrom monotonic import monotonic\n\n\n@pytest.mark.parametrize(\n    \"input,expected\",\n    [\n        ([1, 2, 4, 20], True),\n        ([1, 20, 4, 10], False),\n        ([4, 1, 0, -10], True),\n    ],\n)\ndef test_monotonic(input, expected):\n    assert monotonic(input) == expected# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Mon Mar 16 11:00:00 2020\n\n@author: joseph\n\"\"\"\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, LSTM\n\n# Importing the dataset\ndataset = pd.read_csv('Google_Stock_Price_Train.csv')\n\n# Creating a dataframe with the 'Open' column\ntraining_set = dataset.iloc[:, 1:2].values\n\n# Feature Scaling\nsc = MinMaxScaler(feature_range = (0"}
{"task_id": "HumanEval/44", "completion": "\n\ndef change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < base:\n        return str(x)\n    else:\n        return change_base(x // base, base) + str(x % base)\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n\n\nif __name__ == \"__main__\":\n    main()\n\n#lab_02/task_02.py\ndef is_palindrome(s: str) -> bool:\n    \"\"\"Check if string s is palindrome.\n    >>> is_palindrome('radar')\n    True\n    >>> is_palindrome('python')\n    False\n    \"\"\"\n    return s == s[::-1]\n\n\ndef main():\n    import doctest\n    doctest\n\n\nif __name__ == \"__main__\":\n    main()\n\n#lab_02/task_03.py\ndef is_prime(n: int) -> bool:\n    \"\"\"Check if number n is prime.\n    >>> is_prime(2)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(17)\n    True\n    \"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n\n\nif __name__"}
{"task_id": "HumanEval/124", "completion": "\ndef valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if date == \"\":\n        return False\n    date_list = date.split(\"-\")\n    if len(date_list) != 3:\n        return False\n    month, day, year = date_list\n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n        return False\n    month, day, year = int(month), int(day), int(year)\n    if month < 1 or month > 12:\n        return False\n    if day < 1:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day > 31:\n            return False\n    elif month == 2:\n        if day > 29:\n            return False\n    else:\n        if day > "}
{"task_id": "HumanEval/78", "completion": "\ndef hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n    return sum(1 for c in num if int(c, 16) in primes)\n\nprint(hex_key(\"AB\")) # 1\nprint(hex_key(\"1"}
{"task_id": "HumanEval/112", "completion": "\ndef reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for ch in c:\n        s = s.replace(ch, '')\n    return (s, s == s[::-1])\n\nprint(reverse_delete(\"abcde\", \"ae\"))\nprint(reverse_delete(\"abcdef\", \"b\"))\nprint(reversedelete(\"abcdedcba\", \"ab\"))\n\n# 1. Replace all characters in 'c' with '' in 's'\n# 2. Check if the result string is palindrome\n# 3. Return the result string and the palindrome check result as a tuple.\n# 4. If the result string is the same as its reverse, it is a palindrome.\n# 5. If the result string is not the same as its reverse, it is not a palindrome.\n# 6. Return the result string and the palindrome check result as a tuple.\n# 7. If the result string is the same as its reverse, it is a palindrome.\n# 8. If the result string is not the same as its reverse, it is not a palindrome.\n# 9. Return the result string and the palindrome check result as a tuple.\n# 10. If the result string is the same as its reverse, it is a palindrome.\n# 11. If the result string is not the same as its reverse, it is not a palindrome.\n# 12"}
{"task_id": "HumanEval/144", "completion": "\ndef simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n\n    return (x_num * n_den) % (x_den * n_num) == 0\n\n\nprint(simplify(\"1/5\", \"5/1\"))  # True\nprint(simplify(\"1/6\", \"2/1\"))  # False\nprint(simplify(\"7/10\", \"10/2\"))  # False\nprint(simplify(\"1/2\", \"2/4\"))  # True\nprint(simplify(\"3/4\", \"4/3\"))  # True\nprint(simplify(\"1/3\", \"2/4\"))  # False\nprint(simplify(\"1/2\", \"1/2\"))  # True\nprint(simplify(\"1/2\", \"1/3\"))  # True\nprint(simplify(\"1/3\", \"1/3\"))  # True\nprint(simplify(\"2/3\", \"1/3\"))  # True\nprint(simplify(\"1/3\", \"2/3\"))  # False\nprint(simplify(\"1/2\", \"3/4\"))  # True\nprint(simplify(\"3/4\", \"1/2\"))  # True\nprint(simplify(\"1/2\", \"4/3\"))  # True"}
{"task_id": "HumanEval/145", "completion": "\ndef order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    return sorted(nums, key=lambda n: (sum_of_digits(n), nums.index(n)))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n\n#tests/test_order_by_points.py\nimport unittest\nfrom order_by_points import order_by_points\n\n\nclass TestOrderByPoints(unittest.TestCase):\n    def test_order_by_points(self):\n        self.assertEqual(order_by_points([1, 11, -1, -11, -12]), [-1, -11, 1, -12, 11])\n        self.assertEqual(order_by.test_order_by_points([]), [])\n\n\nif __name__ == \"__main__\":\n    unittest.main()from django.contrib import admin\nfrom .models import *\n\n# Register your models here.\nadmin.site.register(User)\nadmin.site.register(Post)\nadmin.site.register(Comment)\nadmin.site.register(Like)\nadmin.site.register(Follow)\nadmin.site.register(Notification)\nadmin.site.register(Message)\nadmin.site.register(Chat)\nadmin.site.register(Report)\nadmin.site.register(Block)\nadmin.site.register(Admin)"}
{"task_id": "HumanEval/96", "completion": "\ndef count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(2, n) if is_prime(i)]\n    return primes\n\n\nprint(count_up_to(5))  # [2, 3]\nprint(count_up_to(11))  # [2, 3, 5, 7]\nprint(count_up_to(0))  # []\nprint(count_up_to(20))  # [2, 3, 5, 7, 11, 13, 17, 19]\nprint(count_up_to(1))  # []\nprint(count_up_to(18))  # [2, 3, 5, 7, 11, 13, 17]\nprint(count_up_to(100))  # [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 6"}
{"task_id": "HumanEval/101", "completion": "\ndef words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    return s.replace(',', '').split()\n\n\nprint(words_string(\"Hi, my name is John\"))\nprint(words_string(\"One, two, three, four, five, six\"))\n\n# Output:\n# ['Hi', 'my', 'name', 'is', 'John']\n# ['One', 'two', 'three', 'four', 'five', 'six']def count_vowels(s):\n    \"\"\"\n    Write a function that takes a string and returns the number of vowels in the string.\n    The vowels are 'a', 'e', 'i', 'o', and 'u'.\n\n    For example:\n    count_vowels(\"Hello, world\") == 3\n    count_vowels(\"This is a test\") == 3\n    \"\"\"\n    return sum(s.count(vowel) for vowel in 'aeiou')\n\n\nprint(count_vowels(\"Hello, world\"))\nprint(count_vowels(\"This is a test\"))\n\n# Output:\n# 3\n# 3def is_palindrome(s):\n    \"\"\"\n    Write a function that takes a string and returns True if the string is a palindrome and False otherwise.\n    A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward, ignoring spaces, punctuation, and capitalization.\n\n    For example:\n    is_palindrome(\"radar\") == True\n    is_palindrome(\"hello\") == False\n    is_palindrome(\"A man, a plan, a canal: Panama\") =="}
{"task_id": "HumanEval/52", "completion": "\n\ndef below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for i in l:\n        if i >= t:\n            return False\n    return True\n\n\ndef sum_of_digits(n: int):\n    \"\"\"Return the sum of the digits of n.\n    >>> sum_of_digits(1234)\n    10\n    >>> sum_of_digits(1000)\n    1\n    \"\"\"\n    return sum(int(i) for i in str(n))\n\n\ndef is_prime(n: int):\n    \"\"\"Return True if n is a prime number.\n    >>> is_prime(2)\n    True\n    >>> is_prime(1)\n    False\n    >>> is_prime(4)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef is_palindrome(s: str):\n    \"\"\"Return True if s is a palindrome.\n    >>> is_palindrome('radar')\n    True\n    >>> is_palindrome('python')\n    False\n    \"\"\"\n    return s == s[::-1]\n\n\ndef is_anagram(s1: str, s2: str):\n    \"\"\"Return True if s1 and s2 are anagrams.\n    >>> is_anagram('listen', 'silent')\n    True\n    >>> is_anagram('hello', 'world')\n    False\n    \"\"\"\n    return sorted(s1) == sorted(s2)\n\n\ndef is_subsequence(s1: str, s2: str):\n    \"\"\"Return True if s1 is a subsequence of s2"}
{"task_id": "HumanEval/35", "completion": "\n\ndef max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)\n\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    return min(l)\n\n\ndef sum_elements(l: list):\n    \"\"\"Return sum of all elements in the list.\n    >>> sum_elements([1, 2, 3])\n    6\n    >>> sum_elements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    116\n    \"\"\"\n    return sum(l)\n\n\ndef avg_elements(l: list):\n    \"\"\"Return average of all elements in the list.\n    >>> avg_elements([1, 2, 3])\n    2.0\n    >>> avg_elements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    23.4\n    \"\"\"\n    return sum(l) / len(l)\n\n\ndef count_elements(l: list, x):\n    \"\"\"Return count of elements equal to x in the list.\n    >>> count_elements([1, 2, 3], 2)\n    1\n    >>> count_elements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], -5)\n    1"}
{"task_id": "HumanEval/139", "completion": "\ndef special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n - )\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n\n#tests/test_special_factorial.py\nimport unittest\nfrom special_factorial import special_factorial\n\nclass TestSpecialFactorial(unittest.TestCase):\n\n    def test_special_factorial(self):\n        self.assertEqual(special_factorial(0), 1)\n        self.assertEqual(special_factorial(1), 1)\n        self.assertEqual(special_factorial(2), 2)\n        self.assertEqual(special_factorial(3), 9)\n        self.assertEqual(special_factorial(4), 288)\n        self.assertEqual(special_factorial(5), 34560)\n\nif __name__ == '__main__':\n    unittest()#src/config.py\nimport os\n\nclass Config:\n    SECRET_KEY = os.environ.get('SECRET_KEY')\n    SQLALCHEMY_DATABASE_URI = os.environ.get('DATABASE_URL')\n    SQLALCHEMY_TRACK_MODIFICATIONS = False\n    MAIL_SERVER = 'smtp.googlemail.com'\n    MAIL_PORT = 587\n    MAIL_USE_TLS = True\n    MAIL_USERNAME = os.environ.get('EMAIL_USER')\n    MAIL_PASSWORD = osos.environ.get"}
{"task_id": "HumanEval/74", "completion": "\ndef total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) ➞ []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n    '''\n    total_chars1 = sum(len(word) for word in lst1)\n    total_chars2 = sum(len(word) for word in lst2)\n\n    if total_chars1 < total_chars2:\n        return lst1\n    elif total_chars2 <= total_chars1:\n        return lst2\n\nprint(total_match([], []))\nprint(total_match(['hi', 'admin'], ['hI', 'Hi']))\nprint(total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']))\nprint(total_match(['hi', 'admin'], ['hI', 'hi', 'hi']))\nprint(total_match(['4'], ['1', '2', '3', '4', '5']))def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_product(lst):\n    product = 1\n    for num in lst:\n        if is_prime("}
{"task_id": "HumanEval/85", "completion": "\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)\n\n\nprint(add([4, 2, 6, 7]))  # 2\nprint(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))  # 14\nprint(add([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]))  # 0\nprint(add([2, 1, 2, 1, 2, 1, 2, 1, 2, 1]))  # 2\nprint(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))  # 14\nprint(add([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]))  # 0\nprint(add([2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 1]))  # 2\nprint(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))  # 14\nprint(add([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]))  # 0\nprint(add([2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]))  # 2\nprint(add([1, 2, 3"}
{"task_id": "HumanEval/51", "completion": "\n\ndef remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    result = ''\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n\n#test_remove_vowels.py\nimport unittest\nfrom remove_vowels import remove_vowels\n\n\nclass TestRemoveVowels(unittest.TestCase):\n\n    def test_remove_vowels(self):\n        self.assertEqual(remove_vowels(''), '')\n        self.assertEqual(remove_vowels(\"abcdef\\nghijklm\"), 'bcdf\\nghjklm')\n        self.assertEqual(remove_vowels('abcdef'), 'bcdf')\n        self.assertEqual(remove_vowels('aaaaa'), '')\n        self.assertEqual(remove_vowels('aaBAA'), 'B')\n        self.assertEqual(remove_vowels('zbcd'), 'zbcd')\n\n\nif __name__ == \"__main__\":\n    unittest.main()import unittest\nfrom remove_vowels import remove_vowels\n\n\nclass TestRemoveVowels(unittest.TestCase):\n\n    def test_remove_vowels(self):\n        self.assertEqual(remove_vowels(''), '')\n        self.assertEqual"}
{"task_id": "HumanEval/11", "completion": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = ''\n    for i in range(len(a)):\n        result += str(int(a[i]) ^ int(b[i]))\n    return result\n\ndef string_and(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and .\n    Perform binary AND on these inputs and return result also as a string.\n    >>> string_and('010', '110')\n    '010'\n    \"\"\"\n    result = ''\n    for i in range(len(a)):\n        result += str(int(a[i]) & int(b[i]))\n    return result\n\ndef string_or(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary OR on these inputs and return result also as a string.\n    >>> string_or('010', '110')\n    '110'\n    \"\"\"\n    result = ''\n    for i in range(len(a)):\n        result += str(int(a[i]) | int(b[i]))\n    return result\n\ndef string_not(a: str) -> str:\n    \"\"\" Input is a string a consisting only of 1s and 0s.\n    Perform binary NOT on these inputs and return result also as a string.\n    >>> string_not('010')\n    '101'\n    \"\"\"\n    result = ''\n    for i in a:\n        result += str(int(i) ^ 1)\n    return result\n\ndef string_shift_left(a: str, b: int) -> str"}
{"task_id": "HumanEval/49", "completion": "\n\ndef modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return pow(2, n, p)\n\n\ndef modp_iter(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp_iter(3, 5)\n    3\n    >>> modp_iter(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp_iter(3, 11)\n    8\n    >>> modp_iter(100, 101)\n    1\n    \"\"\"\n    result = 1\n    for _ in range(n):\n        result = (result * 2) % p\n    return result\n\n\ndef modp_iter_fast(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp_iter_fast(3, 5)\n    3\n    >>> modp_iter_fast(1101, 101)\n    2\n    >>> modp_iter_fast(0, 101)\n    1\n    >>> modp_iter_fast(3, 11)\n    8\n    >>> modp_iter_fast(100, 1)\n    1\n    \"\"\"\n    result = 1\n    while n > 0:\n        if n % 2 == 1:\n            result = (result * 2) % p\n        n //= 2\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.test"}
